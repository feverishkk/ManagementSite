@page "/changepassword"
@attribute [Authorize]

<h3>ChangePassword</h3>

@if (ShowErrors == true)
{
    <div class="alert alert-danger" role="alert">
        <p>@Errors</p>
    </div>
}

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <MudTextField Label="Email" @bind-Value="CurrentUserName" For="@(()=>model.Email)"  Class="mt-3"  Disabled />

    <MudTextField Label="Old Password" HelperText="Enter Current Password" Class="mt-3" @bind-Value="model.OldPassword"
                  For="@(()=>model.OldPassword)" />

    <MudTextField Label="New Password" HelperText="Choose a strong password" Class="mt-3" @bind-Value="model.NewPassword"
                  For="@(()=>model.NewPassword)" />

    <MudTextField Label="Confirm New Password" HelperText="Re-Enter New Password Again" Class="mt-3" @bind-Value="model.ConfirmNewPassword"
                  For="@(()=>model.ConfirmNewPassword)" />


    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
        Confirm
    </MudButton>

</EditForm>


@code {
    private ChangePasswordDto model;

    private bool ShowErrors { get; set; } = false;
    private string Errors { get; set; } = string.Empty;
    public string CurrentUserName { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        model = new ChangePasswordDto();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetCurrentUserName();
        await base.OnParametersSetAsync();
    }

    private async Task OnValidSubmit()
    {
        model.Email = await GetCurrentUserName();
        var result = await _accountService.ChangePassword(model);
        if (!result.Successful)
        {
            Errors = result.Error;
            ShowErrors = true;
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }
    }

    private async Task<string> GetCurrentUserName()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity;
        if (user.IsAuthenticated)
        {
            return CurrentUserName = user.Name;
        }
        else
        {
            return Errors = "User is NOT Authenticated!!";
        }
    }


}
