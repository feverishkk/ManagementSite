@page "/customeringameinfo/{UserId}"
@using ManagementSite.Client.Pages.CommonDb.Customers.ChangeCustomerItem
@attribute [Authorize(Roles = "SuperAdministrator, ServerAdministrator")]

<CustomersInGameInfo InGameInfo="InGameInfo" />

<MudSpacer />

<CustomerEquipment CustomersEquipment="@CustomersEquipment" />

<MudSpacer />

<CascadingValue Value="@UserId">

    <ChangeCustomerBelt Belts="@Belts"  />
    <ChangeCustomerArmor Armors="@Armors" />
    <ChangeCustomerWeapon TotalWeapons="@Weapons" />

</CascadingValue>

@code {
    [Parameter]
    public string UserId { get; set; }

    MudForm form;
    private MudTable<CustomersViewModel> table;

    private IEnumerable<CustomersInGameInfoViewModel> InGameInfo { get; set; } = new List<CustomersInGameInfoViewModel>();
    private IEnumerable<CustomerEquipmentViewModel> CustomersEquipment { get; set; } = new List<CustomerEquipmentViewModel>();

    private IEnumerable<Belt> Belts = new List<Belt>();
    private IEnumerable<Armor> Armors = new List<Armor>();
    private IEnumerable<TotalWeapons> Weapons = new List<TotalWeapons>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await base.OnInitializedAsync();
    }

    private async Task LoadData()
    {
        InGameInfo = await _customersHttpService.CustomersInGameInfo(UserId);
        CustomersEquipment = await _customersHttpService.CustomersEquipment(UserId);
        Belts = await _getItemHttpService.GetBelt();
        Armors = await _getItemHttpService.GetArmor();
        Weapons = await _getItemHttpService.GetAllWeapon();
    }



}
