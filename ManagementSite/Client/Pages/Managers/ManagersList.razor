@page "/managerlist"
@attribute [Authorize(Roles = "SuperAdministrator, ServerAdministrator")]

<MudTable Items="@Managers" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
          Filter="new Func<ManagersViewModel, bool>(FilterFunction)" @ref="table">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Managers List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Email</MudTh>
        <MudTh>Family Name</MudTh>
        <MudTh>Given Name</MudTh>
        <MudTh>Member Since</MudTh>
        <MudTh>Department</MudTh>
        <MudTh>Department Number</MudTh>
        <MudTh>Email Confirmed</MudTh>
        <MudTh> Role </MudTh>
        <MudTh>Options</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Family Name">@context.FamilyName</MudTd>
        <MudTd DataLabel="Given Name">@context.GivenName</MudTd>
        <MudTd DataLabel="Member Since">@context.MemberSince</MudTd>
        <MudTd DataLabel="Department">@context.Department</MudTd>
        <MudTd DataLabel="Department Number">@context.DepartmentNumber</MudTd>
        <MudTd DataLabel="Email Confirmed">@context.EmailConfirmed</MudTd>
        <MudTd DataLabel="Role">@context.Role</MudTd>

        <MudTd DataLabel="Options">

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error"
                       OnClick="()=>DeleteSubmit(context.Id)">
                Delete
            </MudButton>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning"
                       OnClick="()=>UpdateManagerRole(context.Id)">
                Update Role
            </MudButton>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info"
                       OnClick="()=>UpdateManagerInfo(context.Id)">
                Update Info
            </MudButton>

        </MudTd>

    </RowTemplate>

    <PagerContent>
         <MudTablePager PageSizeOptions="pageSizeOptions"/>
    </PagerContent>

</MudTable>

<div class="d-flex flex-wrap mt-4">

    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>

</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    private bool Succesful = false;
    private string Error = string.Empty;

    private string searchString = string.Empty;

    private int[] pageSizeOptions = new int[] { 5, 10, 15, 20 };

    private MudTable<ManagersViewModel> table;

    private IEnumerable<ManagersViewModel> Managers = new List<ManagersViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Managers = await _managerHttpService.GetAllManagers();
        table.SetRowsPerPage(10);
    }

    private async Task DeleteSubmit(string userId)
    {
        var user = await _managerHttpService.DeleteManager(userId);
        if (!user.Successful)
        {
            Succesful = false;
            Error = "User is null";
        }

        _navigationManager.NavigateTo("/managerlist", true);
    }

    //Role
    private void UpdateManagerRole(string userId)
    {
        var user = Managers.FirstOrDefault(u => u.Id == userId);
        _navigationManager.NavigateTo($"/manager/updaterole/{user.Id}");
    }

    //Info
    private void UpdateManagerInfo(string userId)
    {
        var user = Managers.FirstOrDefault(u => u.Id == userId);
        _navigationManager.NavigateTo($"/manager/updateinfo/{user.Id}");
    }

    private bool FilterFunction(ManagersViewModel managers) => FilterFunc(managers, searchString);

    private bool FilterFunc(ManagersViewModel managers, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (managers.FamilyName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (managers.GivenName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (managers.Department.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (managers.DepartmentNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (managers.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    }
}
