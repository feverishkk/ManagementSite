@page "/manager/updaterole/{UserId}"
@attribute [Authorize(Roles = "SuperAdministrator, ServerAdministrator")]

<h3>Update Role</h3>

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>

    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>

                <MudCardContent>

                    @if (string.IsNullOrWhiteSpace(model.Role))
                    {
                        model.Role = "None";
                    }
                    else
                    {
                        <MudTextField @bind-Value="CurrentUserRole" HelperText="Original a Role" Disabled />
                    }

                    <MudSelect @bind-Value="RoleList" Label="New Role" HelperText="New Role"  AdornmentColor="Color.Secondary">
                        @foreach (RoleList role in Enum.GetValues(typeof(RoleList)))
                        {
                            <MudSelectItem Value="@role">@role</MudSelectItem>
                        }
                    </MudSelect>

                </MudCardContent>

                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="ml-auto">
                        Update
                    </MudButton>
                </MudCardActions>

            </MudCard>
        </MudItem>
    </MudGrid>

</EditForm>


@code {

    [Parameter]
    public string UserId { get; set; }
    public string ErrorMessages { get; set; }

    public RoleList RoleList { get; set; }

    private UpdateManagerRoleViewModel model { get; set; }
    public string CurrentUserRole { get; set; }

    protected override void OnInitialized()
    {
        model = new UpdateManagerRoleViewModel();
        base.OnInitialized();
    }
    protected override async Task OnParametersSetAsync()
    {
        var result = await _managerHttpService.GetUserRole(UserId);

        if (!result.Successful)
        {
            ErrorMessages = "Error!";
        }
        else
        {
            CurrentUserRole = result.Roles;
            StateHasChanged();
        }

    }

    private async void OnValidSubmit()
    {
        ArrayList paramList = new ArrayList();
        paramList.Add(UserId); // 현재 로그인되어 있는 유저의 Id
        paramList.Add(CurrentUserRole); // 타켓유저의 Role
        paramList.Add(RoleList.ToString()); // 바꿀 Role의 이름
        var result = await _managerHttpService.UpdateManagerRole(paramList);
        if (!result.Successful)
        {
            ErrorMessages = "Error!";
        }
        else
        {
            _navigationManager.NavigateTo("/managerlist");
        }
    }

}
